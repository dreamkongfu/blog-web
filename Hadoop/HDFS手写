海量数据的3个经典需求场景
1.求出现次数最多的n个元素，TopN
2.求两个文件当中的共同元素: join 文件
3.快速判断一个元素是否存在于一个庞大的集合内，exists
抽象：解决一个复杂的问题
扩展成两个阶段
1.并行计算（拆分为多个小任务，并行执行）
2.阶段汇总
三种网络架构：
1.BIO
2.NIO
3.AIO
一个技术：Netty
RPC
client调用服务端的服务，发送网络请求
分布文件系统：树形结构
1. DFSNode，树形递归的方式
上传文件
下载文件
2.问题： 多个副本
        一个大文件命名，拆成多个小文件，发到不同的机器
 构造方法： 解析元数据
3 WAL机制：所有影响数据状态的操作，都应该记录操作日志，然后更新数据到内存
  操作日志： 做恢复
4 配置文件：
 servers=‘path1;path2;path3;path4’  四个服务器
 //元数据的存储，描述每一个block
 //存在内存还是 磁盘，如果为了保证数据安全，数据存放于磁盘
 //磁盘的数据和内存的数据一致
 //内存： hashMap
 //key = fsPath,value = DFSNode
 
 namespaceDir 
 
 block_replication = 3
 block_size
 5文件系统的两个方面
   1.真实数据
   2.元数据（文件在文件系统的哪个目录，文件由哪些数据块，副本存放在哪些服务器节点）
 6 上传数据的流程：
   a.规划： 先算出来有几个数据块，要给每个数据块n= block_replication不同的服务节点
   b.实现小文件上传，依次给每个数据块进行传输，先传到一个副本，并且复制数据到其他的副本
   c.记录元数据日志（文件在文件系统的哪个目录，文件由哪些数据块，副本存放在哪些服务器节点）
   
 copytoFile(){
     BlockPlacementManager blockPlaceManager = new BlockPlacementManager();//选择要放置的服务器以及多个副本
     //文件大小
     File file = new File(inputFile);
     long length = file.length();
     //总共多少个数据块
     int blocksize = Integer.parseInt(PropertiesUtil.getProperty("blocksize"));
     double blocks = length*1D /blocksize;
     int trueBlocks = (int)Math.ceil(blocks);
     
     
     InputStream fin = null;
     try{
         fin = new FileInputStream(inputFile)
     }catch(FileNotFoundException e){
     }
     for(int i =0;i<trueBlocks;i++){
        List<Server> servers = ServerLoader.LoadServer();
        List<Server> choseServers = blockPlacementManager.choseServer(servers);
        //拼接出一个数据块在一个服务器节点上的一个路径
        String blockID = "block_"+ new Date().getTime();
        Server server = choseServers.get(0);
        String serverPath = server.getServerPath();
        String parentPath = (serverPath+"/"+outputDir).replace(target:"\\",replacement:"/").replace(target:"//",replacement:"/");
        File parentFile = new File(parentPath);
        if(!parentFile.exists()){
           mkdir(parentPath);
        }
        String perfectServerPath = serverPath+"/"+outputDir+"/"+blockID;
        perfectServerPath = perfectServerPath.replace(target:"\\",replacement:"/").replace(target:"//",replacement:"/");
       FileOutputStream fout = null;
       try{
          fout = new FileOutputStream(perfectServerPath);
       }catch(FileNotFoundException){
        }
     }
       copyFile(fin,fout,blocksize);
       //维护元数据信息
       
       //关闭输出流
       try{
           fout.close();
       }catch(IOException e){
       }
     
     
 }
 copyFile(fin,fout,blocksize){
   try{
     int buffer = 4096;
     int total = blocksize/buffer;
     byte[] byteArray = new byte[buffer];
     int length = 0;
     int counter = 0;
     while((length=in.read(byteArray)>0){
        out.wirte(byteArray,0,length);
        counter++;
        if(counter == total){
           break;
        }
     }
    }catch(FileNotFoundException e){
    }
     
 }
 BlockPlacementManager -----------------------------------------------------------------
 public List<Server> choseServer = new ArrayList(); // 最重要的返回结果
           Random random = new Random();
           String block_replication = PropertiesUtil.getProperty("block_replication");
           int numReplics = Integer.parseInt(block_replication);
           if(servers.size()<=numReplics){
              return servers;
           }
           for(int i = 0;i<numReplics;i++){
              choseServer.add(servers.remove(random.nextInt(servers.size())));

           }
 
 }
 ServerLoader---------------------------------------------------------------------------
 
 List<Server> LoadServer(){
    List<Server> servers = null;
    //解析服务器
    servers = new ArrayList<Server>();
    String serverStr = PropertiesUtil.getProperty("servers");
    String[] ss = serverStr.split(regex:",");
    for(String server:ss){
       servers.add(new Server(server));
    }
    return servers;
    
 }
