1.RPC实现
网络框架：公共框架通信
  5种网络框架： 同步阻塞BIO，NIO，AIO（真正的异步编程）
  1.同步阻塞IO：
  2.同步非阻塞IO
  3.IO多路复用
  4.信号驱动IO
  5.异步IO
 一.同步阻塞IO
             客户端和服务线程是1:1 ，无法高并发，
             sever.accept() 有用户请求才阻塞
             in.readLine 用户线程会被阻塞，直到数据到达线程时阻塞才解除
             class severSocket--------------------------------
             ServerSocket ss = new ServerSocket();
             ss.bind(new InetSocketAddress('localhost',PORT));
             try{
                Socket s = null;
                while(true){
                   s = ss.accept();//阻塞，等待客户端发送连接请求
                   new Thread(new ServerTaskThread(s)).start();
                }
             }catch(Exception e){
                e.printStackTrace();
             }finally{
                if(ss!=null){
                   ss.close();
                }
             }
             
             class ServerTaskThread--------------------------
             run(){
                 try{  inputStream  = s.getInputStream();
                       outputStream = s.getOutputStream();
                       BufferedReader in = new BufferedReader(new InputStreamReader(inputStream));
                       PrintWriter out = new PrintWriter(outputStream,autoFlush:true);
                       while(true){
                          //阻塞，读取客户端发送的请求的数据,可以优化，在完成连接的时候，把线程调度给其他的应用程序
                          string readLine = in.readLine();
                          if(readLine == null){
                               break;
                          }
                          if(readLine.equals("getHow")){
                              string now = getNow();
                              out.println(now);
                          }else if(readLine.equals("getServerName")){

                              out.println("servername");
                          }
                       }
                 }
              }
  二 NIO ， 多路服用selector ，判断什么时候发送过来的数据有没有准备好。
            server class---------------------------------------------------------------------------------------------------
            ServerSocketChannel serverSocketChannel =  ServerSocketChannel.open();
            serverSocketChannel.socket().bind(new InetSocketAddress(9000));
            serverSocketChannel.configureBlocking(false);
            Selector selector = Selector.open();
            serverSocketChannel.register(selector,SelectionKey.OP_CONNECT)
            
            while(true){  //轮询 
                 int selected = selector.select();
                 if(selected>0){
                     Iterator<SelectionKey> iterator = selector.selectedKeys().iterator();
                     while(iterator.next()){
                          SelectionKey selectionKey = iterator.next();
                          iterator.remove();
                          if(selectionKey.isAcceptable){
                             SocketChannel socketChannel = serverSocketChannel.accept();
                          }else if(selectionKey.isReadable){
                             SocketChannel socketChannel = (SocketChannel)selectionKey.channel();
                             ByteBuffer buffer = ByteBuffer.allocate(128);
                             socketChannel.read(buffer);
                          
                          }else if(selectionKey.isWritable){
                             SocketChannel socketChannel = (SocketChannel)selectionKey.channel();
                             ByteBuffer buffer = ByteBuffer.wrap(content.getBytes());
                             socketChannel.write(buffer);
                          }
                          
                     
                     
                     
                     
                     }
                 }
                
            }
            client class --------------------------------------------------------------------------------------------------------
            SocketChannel socketChannel = SocketChannel.open();
            socketChannel.configureBlocking(false);
            Selector selector = Selector.open();
            socketChannel.register(selector,SelectionKey.OP_CONNECT);
            socketChannel.connect("localHost",port);
            
            while(true){
                  int isSelected = selector.selected;
                  if(isSelected>0){
                     Iterator<SelectionKey>  iterator = selector.selectionKeys().iterator();
                     while(iterator.hasNext()){
                            SelectionKey selectionKey = iterator.next();
                            if(selectionkey.isConnectable){
                               SocketChannel socketChannel = (SocketChannel)selectionKey.channel();
                               socketChannel.finishConnect();
                            }else if(selectionKey.isReadable){
                               SocketChannel socketChannel = (SocketChannel)selectionKey.channel();
                               ByteBuffer buffer = ByteBuffer.allocate(128);
                               socketChannel.read(buffer);
                            
                            }else if(selectionKey.isWritable){
                               SocketChannel socketChannel = (SocketChannel)selectionKey.channel();
                               ByteBuffer buffer = ByteBuffer.wrap(content.getBytes());
                               socketChannel.write(buffer);
                               
                            }
                          
                     }
                     
                  }
                  
                  iterator.remove();
            }
  三、NIO 服务端多selector，response队列
  //用阻塞队列，如果队列满了，就阻塞等待，当队列有新的空间，再加入requestChannel。
  ArrayBlockingQueue newConnections = new ArrayBlockingQueue<SocketChannel>[connectionQueueSize]
  LinkedBlockingQueue responseQueue = new LinkedBlockingQueue<Response>()
  run(){
     serverChannel.register(nioSelector,SelectionKey.OP_ACCEPT)
     int currentIndex = 0;
     try{
       while(isRunning){
          try{
             int isSelected = nioSelector.select()
             if(isSelected>0){
                //遍历所有的keys
                Interator<SelectionKey> iterator = nioSelector.selectionKeys().iterator();
                while(iterator.hasNext&&isRunning){
                     try{
                        SelectionKey selectionKey = iterator.next();
                        iterator.remove();
                        if(selectionKey.isAcceptable){
                             ServerSocketChannel serverChannel = (ServerSocketChannel)key.channel();
                             SocketChannel socketChannel = serverChannel.accept();
                             socketChannel.configureBlocking(false)
                             socketChannel.socket().setTcpNoDelay(true)
                             socketChannel.socket().setKeepAlive(true)
                             //轮流分配给3个selector
                             int retries = 3;
                             
                             do{
                               retries -=1;
                               Processor processor = null;
                               synchronized(currentIndex){
                                      int index = currentIndex%processors.size;
                                      processor = processors[index];
                                      currentIndex ++;
                               }
                              
                             }while(!assignNewProcessor(processor,socketChannel,retries==0))
                        }
                        
                     }
                }
             }
          }
        }
     }
  }
  队列满了阻塞，有新的位置，加入。
  acceptConnections(SocketChannel socketChannel){
      boolean accepted = false;
      if(newConnections.offer(socketChannel)){
         accepted = true;
      }else if(newConnections.put(socketChannel)){
          //阻塞
          accepted = false;
      }
      return accepted;
  }
  //分配新的处理线程
  assignNewProcessor(Processor processor,SocketChannel socketChannel,Boolean maybeBlock){
          return  processor.accept(SocketChannel socketChannel,Boolean maybeBlock);
  
  
  
  }
  
Processor class-----------------------------------------------------------------------------------------------------  
  run(){
    try{
       while(isRunning){
           //注册OP_READ事件
           configureNewConnections()
           //处理response队列，并且注册OP_WRITE事件
           processNewResponses()
           //真正往selector写数据
           poll()
           processCompletedReceives()
           processCompletedSends()
           processDisconnected()
       }
    }
  }
  accept(SocketChannel socketChannel,Boolean mayBlock){
      boolean accepted = false;
      if(newConnections.offer(socketChannel))
          accepted= true;
      else if (mayBlock){
         //如果队列满了，阻塞队列
         newConnections.put(socketChannel);
         accepted= true;
      }else 
          accepted = false;
      if(accepted)
          wakeup();
      return accepted;
  }
        
  configureNewConnections(){
     int connectionsProcessed = 0;
     while(connectionsProcessed<newConnections.size&&!newConnections.isEmpty()){
        SocketChannel channel= newConnections.poll();
        try{
            selector.register(channel);
        }catch{
          close(listenername,channel)
        }
        connectionsProcessed++;
     }
  
  }
  
  
  
  
  
  
  
